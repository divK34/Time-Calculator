def add_time(start, duration, start_day=False):
    # Splits the string by spaces
    start_space_split = start.split()  # ['6:30', 'PM']
    
    # Splits the time part by colon
    start_time = start_space_split[0].split(':')  # ['6', '30']
    start_period = start_space_split[1]  # PM
    
    # Splits the hour and minutes by colon
    duration_split = duration.split(':')  # ['205', '12']

    # Splits hours and minutes in duration
    duration_hours = int(duration_split[0])  # int - 205
    duration_minutes = int(duration_split[1])  # int - 12

    start_hours = int(start_time[0]) # int - 6
    start_minutes = int(start_time[1]) # int - 30

    # Convert start time to 24-hour format
    if start_period == 'PM' and start_hours != 12:
        start_hours += 12 # adds 12 
    elif start_period == 'AM' and start_hours == 12:
        start_hours = 0

    # Add duration
    total_minutes = start_minutes + duration_minutes
    total_hours = start_hours + duration_hours + total_minutes // 60
    total_minutes = total_minutes % 60

    # Calculate days later
    days_later = total_hours // 24
    total_hours = total_hours % 24

    # Determine new period
    if total_hours >= 12:
        period = 'PM'
        if total_hours > 12:
            total_hours -= 12
    else:
        period = 'AM'
        if total_hours == 0:
            total_hours = 12

    new_time = f'{total_hours}:{total_minutes:02d} {period}'
        # Handle weekdays
    if start_day:
        days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        start_day_index = days_of_week.index(start_day.capitalize())
        new_day_index = (start_day_index + days_later) % 7
        new_day = days_of_week[new_day_index]
        new_time += f', {new_day}'
    
    if days_later == 1:
        new_time += ' (next day)'
    elif days_later > 1:
        new_time += f' ({days_later} days later)'

    return new_time

# Example usage
new_time = add_time('3:00 PM', '3:10')
print(new_time)